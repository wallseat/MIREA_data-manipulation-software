"""initial migration

Revision ID: 67f0919277d3
Revises: 
Create Date: 2022-10-23 14:50:31.889326

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "67f0919277d3"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.execute(sa.schema.CreateSchema("shop"))

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "contract_type",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("type", sa.String(length=20), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__contract_type__id")),
        sa.UniqueConstraint("type", name=op.f("uq__contract_type__type")),
        schema="shop",
    )
    op.create_table(
        "equipment_positions",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column(
            "price",
            sa.Numeric(precision=10, scale=2, asdecimal=False),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__equipment_positions__id")),
        schema="shop",
    )
    op.create_table(
        "group",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__group__id")),
        schema="shop",
    )
    op.create_table(
        "organization",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("location", sa.String(length=50), nullable=False),
        sa.Column("postal_code", sa.String(length=20), nullable=True),
        sa.Column("first_contract_date", sa.Date(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__organization__id")),
        schema="shop",
    )
    op.create_index(
        op.f("ix__location"),
        "organization",
        ["location"],
        unique=False,
        schema="shop",
    )
    op.create_index(
        op.f("ix__name"), "organization", ["name"], unique=False, schema="shop"
    )
    op.create_table(
        "priority",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("priority", sa.String(length=25), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__priority__id")),
        sa.UniqueConstraint("priority", name=op.f("uq__priority__priority")),
        schema="shop",
    )
    op.create_table(
        "task_type",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("type", sa.String(length=25), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__task_type__id")),
        sa.UniqueConstraint("type", name=op.f("uq__task_type__type")),
        schema="shop",
    )
    op.create_table(
        "user",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("password_hash", sa.String(length=64), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__user__id")),
        schema="shop",
    )
    op.create_table(
        "user_group",
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("group_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.PrimaryKeyConstraint(
            "user_id",
            "group_id",
            name=op.f("pk__user_group__user_id_group_id"),
        ),
        schema="shop",
    )
    op.create_table(
        "contact_person",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("first_name", sa.String(length=50), nullable=False),
        sa.Column("second_name", sa.String(length=50), nullable=False),
        sa.Column("email", sa.String(length=100), nullable=False),
        sa.Column("tel", sa.String(length=15), nullable=True),
        sa.Column("organization_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["shop.organization.id"],
            name=op.f("fk__contact_person__organization__organization_id"),
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__contact_person__id")),
        sa.UniqueConstraint(
            "first_name",
            "second_name",
            "email",
            name=op.f("uq__contact_person__first_name_second_name_email"),
        ),
        schema="shop",
    )
    op.create_index(
        "first_name",
        "contact_person",
        ["second_name"],
        unique=False,
        schema="shop",
    )
    op.create_table(
        "contract",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("type_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("organization_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["shop.organization.id"],
            name=op.f("fk__contract__organization__organization_id"),
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["type_id"],
            ["shop.contract_type.id"],
            name=op.f("fk__contract__contract_type__type_id"),
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__contract__id")),
        schema="shop",
    )
    op.create_table(
        "equipment_balance",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("position_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("serial_number", sa.String(length=100), nullable=False),
        sa.ForeignKeyConstraint(
            ["position_id"],
            ["shop.equipment_positions.id"],
            name=op.f("fk__equipment_balance__equipment_positions__position_id"),
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__equipment_balance__id")),
        schema="shop",
    )
    op.create_table(
        "contract_equipment",
        sa.Column("contract_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("equipment_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["contract_id"],
            ["shop.contract.id"],
            name=op.f("fk__contract_equipment__contract__contract_id"),
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["equipment_id"],
            ["shop.equipment_balance.id"],
            name=op.f("fk__contract_equipment__equipment_balance__equipment_id"),
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint(
            "contract_id",
            "equipment_id",
            name=op.f("pk__contract_equipment__contract_id_equipment_id"),
        ),
        schema="shop",
    )
    op.create_table(
        "task",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("title", sa.String(length=100), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("priority_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("type_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("open_date", sa.Date(), nullable=False),
        sa.Column("close_date", sa.Date(), nullable=True),
        sa.Column("due_date", sa.Date(), nullable=True),
        sa.Column("completed", sa.Boolean(), nullable=False),
        sa.Column("author", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("executor", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("contract_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("contact_person_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["author"],
            ["shop.user.id"],
            name=op.f("fk__task__user__author"),
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["contact_person_id"],
            ["shop.contact_person.id"],
            name=op.f("fk__task__contact_person__contact_person_id"),
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["contract_id"],
            ["shop.contract.id"],
            name=op.f("fk__task__contract__contract_id"),
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["executor"],
            ["shop.user.id"],
            name=op.f("fk__task__user__executor"),
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["priority_id"],
            ["shop.priority.id"],
            name=op.f("fk__task__priority__priority_id"),
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["type_id"],
            ["shop.task_type.id"],
            name=op.f("fk__task__task_type__type_id"),
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__task__id")),
        schema="shop",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("task", schema="shop")
    op.drop_table("contract_equipment", schema="shop")
    op.drop_table("equipment_balance", schema="shop")
    op.drop_table("contract", schema="shop")
    op.drop_index("first_name", table_name="contact_person", schema="shop")
    op.drop_table("contact_person", schema="shop")
    op.drop_table("user_group", schema="shop")
    op.drop_table("user", schema="shop")
    op.drop_table("task_type", schema="shop")
    op.drop_table("priority", schema="shop")
    op.drop_index(op.f("ix__name"), table_name="organization", schema="shop")
    op.drop_index(op.f("ix__location"), table_name="organization", schema="shop")
    op.drop_table("organization", schema="shop")
    op.drop_table("group", schema="shop")
    op.drop_table("equipment_positions", schema="shop")
    op.drop_table("contract_type", schema="shop")
    # ### end Alembic commands ###

    op.execute(sa.schema.DropSchema("shop"))
